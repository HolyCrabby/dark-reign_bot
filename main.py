import logging
import sqlite3
import random
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

# –¢–û–ö–ï–ù –ë–û–¢–ê - –æ—Ç—Ä–∏–º—É—î–º–æ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –≤—Å—Ç–∞–≤–ª—è—î–º–æ –Ω–∞–ø—Ä—è–º—É
BOT_TOKEN = os.environ.get('BOT_TOKEN', '7843448143:AAGOT2t0KgoB-fbFOfJamyvh-IvjY7BsBR8')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
DATABASE_PATH = 'dark_reign.db'

def init_database():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE NOT NULL,
            username TEXT,
            language TEXT DEFAULT 'uk',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS towers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE NOT NULL,
            level INTEGER DEFAULT 1,
            gold INTEGER DEFAULT 205,
            wood INTEGER DEFAULT 50,
            stone INTEGER DEFAULT 50,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS minions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            level INTEGER DEFAULT 1,
            experience INTEGER DEFAULT 0,
            health INTEGER DEFAULT 100,
            attack INTEGER DEFAULT 10,
            defense INTEGER DEFAULT 5,
            is_on_mission BOOLEAN DEFAULT FALSE,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    conn.commit()
    conn.close()

def create_user(telegram_id, username=None, language='uk'):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    try:
        cursor.execute('INSERT INTO users (telegram_id, username, language) VALUES (?, ?, ?)', 
                      (telegram_id, username, language))
        user_id = cursor.lastrowid
        
        cursor.execute('INSERT INTO towers (user_id, gold, wood, stone) VALUES (?, ?, ?, ?)', 
                      (user_id, 205, 50, 50))
        
        conn.commit()
        return user_id
    except sqlite3.IntegrityError:
        return None
    finally:
        conn.close()

def user_exists(telegram_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (telegram_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def get_user_data(telegram_id):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT u.id, u.language, t.level, t.gold, t.wood, t.stone
        FROM users u
        JOIN towers t ON u.id = t.user_id  
        WHERE u.telegram_id = ?
    ''', (telegram_id,))
    
    result = cursor.fetchone()
    conn.close()
    
    if result:
        return {
            'user_id': result[0], 'language': result[1], 'tower_level': result[2],
            'gold': result[3], 'wood': result[4], 'stone': result[5]
        }
    return None

def set_user_language(telegram_id, language):
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET language = ? WHERE telegram_id = ?', (language, telegram_id))
    conn.commit()
    conn.close()

def hire_minion(telegram_id, name):
    """–ù–∞–π–Ω—è—Ç–∏ –ø–æ—Å—ñ–ø–∞–∫—É"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('SELECT id FROM users WHERE telegram_id = ?', (telegram_id,))
    user_id = cursor.fetchone()[0]
    
    cursor.execute('INSERT INTO minions (user_id, name) VALUES (?, ?)', (user_id, name))
    conn.commit()
    conn.close()

def get_user_minions(telegram_id):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å—ñ–ø–∞–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT m.name, m.level, m.health, m.attack, m.defense
        FROM minions m
        JOIN users u ON m.user_id = u.id
        WHERE u.telegram_id = ?
    ''', (telegram_id,))
    
    results = cursor.fetchall()
    conn.close()
    return [{'name': r[0], 'level': r[1], 'health': r[2], 'attack': r[3], 'defense': r[4]} for r in results]

# –ö–Ω–æ–ø–∫–∏ –∑–Ω–∏–∑—É (–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é)
def main_reply_keyboard(language='en'):
    if language == 'uk':
        keyboard = [
            [KeyboardButton("üè∞ –ë–∞—à—Ç–∞"), KeyboardButton("‚öîÔ∏è –ü–æ—Å—ñ–ø–∞–∫–∏")],
            [KeyboardButton("üìú –ú—ñ—Å—ñ—ó"), KeyboardButton("üèóÔ∏è –ë—É–¥—ñ–≤–ª—ñ")],
            [KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞"), KeyboardButton("üåê –ú–æ–≤–∞")]
        ]
    else:
        keyboard = [
            [KeyboardButton("üè∞ Tower"), KeyboardButton("‚öîÔ∏è Minions")],
            [KeyboardButton("üìú Missions"), KeyboardButton("üèóÔ∏è Buildings")], 
            [KeyboardButton("‚ùì Help"), KeyboardButton("üåê Language")]
        ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def language_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="lang_uk")],
        [InlineKeyboardButton("üá∫üá∏ English", callback_data="lang_en")]
    ])

# –¢–µ–∫—Å—Ç–∏
TEXTS = {
    'uk': {
        'welcome_new': "üè∞ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Dark Reign!\n\n–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        'welcome_back': "üè∞ –ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, –¢–µ–º–Ω–∏–π –õ–æ—Ä–¥–µ!",
        'tower_info': "üè∞ –í–∞—à–∞ –ë–∞—à—Ç–∞ (–†—ñ–≤–µ–Ω—å {tower_level})\nüí∞ –ó–æ–ª–æ—Ç–æ: {gold}\nü™µ –î–µ—Ä–µ–≤–æ: {wood}\nüóø –ö–∞–º—ñ–Ω—å: {stone}",
        'no_minions': "‚öîÔ∏è –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–æ—Å—ñ–ø–∞–∫.",
        'minion_hired': "‚öîÔ∏è –í–∏ –Ω–∞–π–Ω—è–ª–∏: {name}!",
        'language_changed': "üá∫üá¶ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É"
    },
    'en': {
        'welcome_new': "üè∞ Welcome to Dark Reign!\n\nChoose your language:",
        'welcome_back': "üè∞ Welcome back, Dark Lord!",
        'tower_info': "üè∞ Your Tower (Level {tower_level})\nüí∞ Gold: {gold}\nü™µ Wood: {wood}\nüóø Stone: {stone}",
        'no_minions': "‚öîÔ∏è You have no minions yet.",
        'minion_hired': "‚öîÔ∏è You hired: {name}!",
        'language_changed': "üá∫üá∏ Language changed to English"
    }
}

def get_text(language, key, **kwargs):
    text = TEXTS.get(language, TEXTS['uk']).get(key, key)
    return text.format(**kwargs) if kwargs else text

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    
    if not user_exists(telegram_id):
        text = get_text('uk', 'welcome_new')
        await update.message.reply_text(text, reply_markup=language_keyboard())
        return
    
    user_data = get_user_data(telegram_id)
    language = user_data['language']
    
    welcome_text = get_text(language, 'welcome_back')
    tower_text = get_text(language, 'tower_info', **user_data)
    
    await update.message.reply_text(f"{welcome_text}\n\n{tower_text}", 
                                  reply_markup=main_reply_keyboard(language))

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–Ω–∏–∑—É"""
    text = update.message.text
    telegram_id = update.effective_user.id
    
    if not user_exists(telegram_id):
        await start_command(update, context)
        return
    
    user_data = get_user_data(telegram_id)
    language = user_data['language']
    
    if text in ["üè∞ –ë–∞—à—Ç–∞", "üè∞ Tower"]:
        tower_text = get_text(language, 'tower_info', **user_data)
        await update.message.reply_text(tower_text)
        
    elif text in ["‚öîÔ∏è –ü–æ—Å—ñ–ø–∞–∫–∏", "‚öîÔ∏è Minions"]:
        minions = get_user_minions(telegram_id)
        if not minions:
            text_msg = get_text(language, 'no_minions')
        else:
            text_msg = f"‚öîÔ∏è {'–í–∞—à—ñ –ü–æ—Å—ñ–ø–∞–∫–∏' if language == 'uk' else 'Your Minions'}:\n"
            for minion in minions:
                text_msg += f"‚Ä¢ {minion['name']} (Level {minion['level']})\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞–π–º—É
        keyboard = [[InlineKeyboardButton(
            "üìù –ù–∞–π–Ω—è—Ç–∏ –ø–æ—Å—ñ–ø–∞–∫—É" if language == 'uk' else "üìù Hire Minion", 
            callback_data="hire_minion"
        )]]
        await update.message.reply_text(text_msg, reply_markup=InlineKeyboardMarkup(keyboard))
        
    elif text in ["üìú –ú—ñ—Å—ñ—ó", "üìú Missions"]:
        missions_text = "üìú –ú—ñ—Å—ñ—ó –ø–æ–∫–∏ —â–æ —Ä–æ–∑—Ä–æ–±–ª—è—é—Ç—å—Å—è..." if language == 'uk' else "üìú Missions are under development..."
        await update.message.reply_text(missions_text)
        
    elif text in ["üèóÔ∏è –ë—É–¥—ñ–≤–ª—ñ", "üèóÔ∏è Buildings"]:
        buildings_text = "üèóÔ∏è –ë—É–¥—ñ–≤–ª—ñ –ø–æ–∫–∏ —â–æ —Ä–æ–∑—Ä–æ–±–ª—è—é—Ç—å—Å—è..." if language == 'uk' else "üèóÔ∏è Buildings are under development..."
        await update.message.reply_text(buildings_text)
        
    elif text in ["‚ùì –î–æ–ø–æ–º–æ–≥–∞", "‚ùì Help"]:
        help_text = ("üè∞ Dark Reign - –≥—Ä–∞ –ø—Ä–æ —Ç–µ–º–Ω–æ–≥–æ –ª–æ—Ä–¥–∞!\n\n"
                    "üè∞ –ë–∞—à—Ç–∞ - –≤–∞—à–∞ –≥–æ–ª–æ–≤–Ω–∞ –±–∞–∑–∞\n"
                    "‚öîÔ∏è –ü–æ—Å—ñ–ø–∞–∫–∏ - –≤–∞—à—ñ –≤–æ—ó–Ω–∏\n"
                    "üìú –ú—ñ—Å—ñ—ó - –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø–æ—Å—ñ–ø–∞–∫\n"
                    "üèóÔ∏è –ë—É–¥—ñ–≤–ª—ñ - –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –±–∞—à—Ç–∏") if language == 'uk' else \
                   ("üè∞ Dark Reign - a dark lord game!\n\n"
                    "üè∞ Tower - your main base\n"
                    "‚öîÔ∏è Minions - your warriors\n"
                    "üìú Missions - tasks for minions\n"
                    "üèóÔ∏è Buildings - tower upgrades")
        await update.message.reply_text(help_text)
        
    elif text in ["üåê –ú–æ–≤–∞", "üåê Language"]:
        lang_text = "üåê Choose your language / –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:"
        await update.message.reply_text(lang_text, reply_markup=language_keyboard())

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    telegram_id = query.from_user.id
    data = query.data
    
    await query.answer()
    
    if data.startswith("lang_"):
        language = data.split("_")[1]
        
        if not user_exists(telegram_id):
            create_user(telegram_id, query.from_user.username, language)
        else:
            set_user_language(telegram_id, language)
        
        success_text = get_text(language, 'language_changed')
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
        user_data = get_user_data(telegram_id)
        welcome_text = get_text(language, 'welcome_back')
        tower_text = get_text(language, 'tower_info', **user_data)
        
        # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await query.edit_message_text(f"{success_text}\n\n{welcome_text}\n\n{tower_text}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await context.bot.send_message(
            chat_id=telegram_id,
            text="üéÆ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:" if language == 'uk' else "üéÆ Use the buttons below:",
            reply_markup=main_reply_keyboard(language)
        )
    
    elif data == "hire_minion":
        user_data = get_user_data(telegram_id)
        language = user_data['language']
        
        names = ['Grok', 'Zarg', 'Vex', 'Nix', 'Bane', 'Scar', 'Grim', 'Hex']
        name = random.choice(names)
        hire_minion(telegram_id, name)
        
        text = get_text(language, 'minion_hired', name=name)
        await query.edit_message_text(text)

def main():
    init_database()
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(callback_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    
    print("üè∞ Dark Reign bot starting...")
    application.run_polling()

if __name__ == '__main__':
    main()
